//重建二叉树：
//思路:
//1：先在前序遍历结果的数组中取出第一个节点当成根节点
//2：在遍历中序遍历结果，将各节点找出来，分成两个新的区间，然后递归重建二叉树即可
import java.util.*;
public class Solution {
    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
        if(pre.length==0||in.length==0){
            return null;
        }
        //思路：取出前序中的根节点，然后继续遍历，当成左右子树的根节点
        //然后找到中序遍历结果中的根节点，分成左右子树
        TreeNode root=new TreeNode(pre[0]);
        
        //在中序遍历结果中找到跟：
        for(int i=0;i<in.length;i++){
            if(in[i]==pre[0]){
                root.left=reConstructBinaryTree(Arrays.copyOfRange(pre,1,i+1),Arrays.copyOfRange(in,0,i));
                root.right=reConstructBinaryTree(Arrays.copyOfRange(pre,i+1,pre.length),Arrays.copyOfRange(in,i+1,in.length));
                break;
            }
        }
        return root;
    }
}

//二进制中数字1的个数：
//思路：
//1：暴力法，直接循环遍历计算++即可
//2：简单法：和暴力差不多：就是使用字符串，将其变成一个二进制的字符串
public class Solution {
    public int NumberOf1(int n) {
        String s=Integer.toBinaryString(n);
        int count=0;
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='1'){
                count++;
            }
        }
        return count;
    }
}

//求一个数的指数：
public class Solution {
    public double Power(double base, int exponent) {
        //在这里要考虑指数的正负
        //1:当底数为0的时候，不管怎么样都是0
        if(base==0.0){
            return 0.0;
        }
        //2：当指数为正的时候，乘以指数的次数即可
        double result=1;
        int e=Math.abs(exponent);
        while(e!=0){
            result=result*base;
            e--;
        }
        //3：当指数为符的情况，坟墓就是为正的情况下的
        if(exponent<0){
            result=1/result;
        }
        return result;
  }
}

//在字符串1中求出出现字符串2的次数


//求字符串中对应字符出现的次数
    public static void main(String[] args){
        String str="dajhudanudhahdiancijaniahnkaio";
        Map<Character,Integer> map=new HashMap<Character,Integer>();
        //将字符串转成字符数组进行遍历
        char[]arr=str.toCharArray();
        for(char ch:arr){
            if(map.containsKey(ch)){
                int count=map.get(ch);
                map.put(ch,count+1);
            }else{
                map.put(ch,1);
            }
        }
    }

//判断出栈顺序是否正确
//思路：将入栈的数组进行入栈操作，判断栈顶元素是否和出栈的元素相等，不相等则入栈，相等的话则出栈，出栈的数组下标向后挪动，循环判断
import java.util.ArrayList;
import java.util.Stack;
public class Solution {
    //思路：将入栈的数组重新入栈，然后进行匹配就好了
    public boolean IsPopOrder(int [] pushA,int [] popA) {
        if(pushA.length==0||popA.length==0||popA.length!=pushA.length){
            return false;
        }
        Stack<Integer> s=new Stack<>();
        int j=0;
        for(int i=0;i<pushA.length;i++){
            s.push(pushA[i]);
            while(!s.isEmpty()&&s.peek()==popA[j]){
                s.pop();
                j++;
            }
        }
        return s.isEmpty();
    }
}
//求出数组中连续子数组中最大的值
import java.util.*;
public class Solution {
    public int FindGreatestSumOfSubArray(int[] array) {
    //思路：利用动态规划：选与不选
        //也就是最大值是当前这个数，和当前这个数+前面的数的最大值
        int max=array[0];
        int res=array[0];
        for(int i=1;i<array.length;i++){
            max=Math.max(max+array[i],array[i]);
            res=Math.max(res,max);
        }
        return res;
    }
}

//数组1~n中1的个数：
public class Solution {
    int sum=0;
    public int NumberOf1Between1AndN_Solution(int n) {
        //思路：先创建出1~N个数字，然后挨个进行判断数中1的个数，
        //定义一个全局变量记录1的个数加起来即可
        for(int i=0;i<=n;i++){
            int count=Count(i);
            sum+=count;
        }
        return sum;
    }
    public  int Count(int n){
        int count=0;
        while(n>0){
            if(n%10==1){
                count++;
            }
            n/=10;
        }
        return count;
    }
}

//两个链表的公共节点
//思路1：栈：将链表1入栈，然后依次将链表2入栈，在出栈的情况下返回第一个不相等的节点的上一个节点即可
//思路2：Map：将链表1放入当Map中，然后，将链表2依次放入，再放入链表2时，value值第一个出现2的，返回该节点即可
//思路3：双指针：利用构造相等步数进行相同节点，返回即可
import java.util.*;
public class Solution {
    public ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) {
        ListNode res=null;
        if(pHead1==null||pHead2==null){
            return res;
        }
        Stack<ListNode> s1=new Stack<>();
        Stack<ListNode> s2=new Stack<>();
        while(pHead1!=null){
            s1.push(pHead1);
            pHead1=pHead1.next;
        }
        while(pHead2!=null){
            s2.push(pHead2);
            pHead2=pHead2.next;
        }
        if(s1.peek()!=s2.peek()){
            return null;
        }
        while(s1.size()!=0&&s2.size()!=0){
            res=s1.peek();//先将前一个节点保存起来
            s1.pop();
            s2.pop();
            if(!s1.isEmpty()&&!s2.isEmpty()&&s1.peek()!=s2.peek()){
                return res;
            }
        }
      return res;
    }
}

//判断是不是平衡二叉树
//思路1：计算出左右子树的高度，通过进行判断高度差的绝对值是否<=1
//思路2：在子算左右子树高的时候，判断左右的节点的高度，面的重复计算
public class Solution {
    public boolean IsBalanced_Solution(TreeNode root) {
        if(root==null){
            return true;
        }
        int left=depth(root.left);
        int right=depth(root.right);
        if(Math.abs(left-right)<=1){
            return true;
        }
        return false;
    }
    public int depth(TreeNode root){
        if(root==null){
            return 0;
        }
        int left=depth(root.left);
        int right=depth(root.right);
        return (left>right?left:right)+1;
    }
}

//和为S的连续正序列
import java.util.ArrayList;
public class Solution {
    public ArrayList<ArrayList<Integer> > FindContinuousSequence(int sum) {
       //定义两个指针，左指针从1开始，右指针从2 开始
        ArrayList<ArrayList<Integer>> resp=new ArrayList<>();
        if(sum<=0){
            return resp;
        }
        int left=1;
        int right=2;
        int sumval=left+right;
        while(sum>right){
            if(sumval<sum){
                right++;
                sumval+=right;
            }else if(sumval>sum){
                sumval-=left;
                left++;
            }else{
                ArrayList<Integer> ls=new ArrayList<>();
                for(int i=left;i<=right;i++){
                    ls.add(i);
                }
                resp.add(ls);
                right++;
                sumval+=right;
            }
        }
        return resp;
    }
}

//两个数乘积最小，和=S
import java.util.ArrayList;
public class Solution {
    public ArrayList<Integer> FindNumbersWithSum(int [] array,int sum) {
        ArrayList<Integer> ls=new ArrayList<>();
        if(array.length==0){
            return ls;
        }
        int left=0;
        int right=array.length-1;
        while(left<right){
            if(array[left]+array[right]==sum){
                ls.add(array[left]);
                ls.add(array[right]);
                //这里就是最外层，保存好直接掏出循环即可
                break;
            }else if(array[left]+array[right]<sum){
                left++;
            }else{
                right--;
            }
        }
        return ls;
    }
}

//字符串的循环左移：XYZABC→ABCXYZ
//思路：利用字符串的拼接技术substring
import java.util.*;
public class Solution {
    public String LeftRotateString(String str,int n) {
        //利用String里面的函数
        if(str==null||n>str.length()){
            return str;
        }
        return str.substring(n,str.length())+str.substring(0,n);
    }
}

//顺子+大小王
import java.util.TreeSet;
public class Solution {
    public boolean isContinuous(int [] numbers) {
        //思路：因为5个顺子则是不连续的，可以用set解决，顺子的特点就是最大值和最小值的差值是5
        //1：创建set存放顺子，但是大小王相当于0则不存储、
        //2：看0个个数(也就是大小王的个数)和顺子的个数加上是不是等于5
        if(numbers.length>5||numbers.length<5){
            return false;
        }
        TreeSet<Integer> s=new TreeSet<>();
        int count=0;
        for(int i=0;i<numbers.length;i++){
            if(numbers[i]==0){
                count++;
            }else{
                s.add(numbers[i]);
            }
        }
        //0的个数和其他数的个数相加起来不能小于5
        if(count+s.size()<5){
            return false;
        }
        //最大值和最小值差不能大于5
        if((s.last()-s.first())<5){
            return true;
        }
        return false;
    }
}

//孩子出局：n个孩子，数到m的进行出局
import java.util.*;
public class Solution {
    public int LastRemaining_Solution(int n, int m) {
        //思路：利用顺序表
        if(n<1||m<1){
            return -1;
        }
        List<Integer> ls=new ArrayList<>();
        for(int i=0;i<n;i++){
            ls.add(i);
        }
        int cur=-1;
        while(ls.size()>1){
            for(int i=0;i<m;i++){
                cur++;
                if(cur==ls.size()){
                    cur=0;//从头开始
                }
            }
            ls.remove(cur);
            cur--;//因为该位置的已经删除了，所以的--一下，重新开始
        }
        //直到从顺序表中移动的还剩最后一个元素的时候，进行返回即可
        return ls.get(0);
    }
}


//1+2+3+....+n,不能使用判断和循环和乘除，也就是说只能使用等差数列公式
public class Solution {
    public int Sum_Solution(int n) {
        //用到等差数列（(n+n^2)/2）
        int sum=(int)Math.pow(n,2)+n;
        return sum>>1;//右移相当于除以2
    }
}

//返回数组中有任意重复的数字
//思路1：首先想到的就是哈希
   public boolean duplicate(int numbers[],int length,int [] duplication) {
        Map<Integer,Integer> m=new HashMap<>();
        for(int i=0;i<length;i++){
            if(m.containsKey(numbers[i])){
                duplication[0]=numbers[i];
                return true;
            }else{
                m.put(numbers[i],1);
            }
        }
        return false;
    }
}
//思路2：先进行排序，然后判断相邻的位置上有没有相等的，有相等直接返回
import java.util.*;
public class Solution {
    public boolean duplicate(int numbers[],int length,int [] duplication) {
        if(numbers == null || length == 0){
            return false;
        }
        Arrays.sort(numbers);
        for(int i=0;i<length-1;i++){
            if(numbers[i] == numbers[i+1]){
                duplication[0] = numbers[i];
                return true;
            }
        }
        return false;
    }
}

//层次遍历，将每行结果放在list中
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
 
 
/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;
    public TreeNode(int val) {
        this.val = val;
    }
}
*/
public class Solution {
    ArrayList<ArrayList<Integer> > Print(TreeNode pRoot) {
        ArrayList<ArrayList<Integer>> lists = new ArrayList<ArrayList<Integer>>();
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        
        if(pRoot == null){
            return lists;
        }
        
        //首先将根节点放入队列
        q.offer(pRoot);
        
        while(!q.isEmpty()){
            ArrayList<Integer> ls=new ArrayList<>();
            int size=q.size();
            for(int i=0;i<size;i++){
                TreeNode temp=q.poll();
                ls.add(temp.val);
                if(temp.left!=null){
                    q.offer(temp.left);
                }
                if(temp.right!=null){
                    q.offer(temp.right);
                }
            }
            lists.add(ls);
        }
        return lists;
    }
}

//中位数：
//思路1：排序，然后计算中间值即可(不能用数组，因为不知道大小，所以用动态的一位数组)
//思路2：使用TreeSet(用树进行排序)，然后找中位数即可
import java.util.*;
public class Solution {
    ArrayList<Integer> arr=new ArrayList<>();

    public void Insert(Integer num) {
        arr.add(num);
    }

    public Double GetMedian() {
        Collections.sort(arr);
        int index=arr.size()/2;
        if(arr.size()%2!=0){
            return (double)arr.get(index);
        }
        return ((double)arr.get(index-1)+(double)arr.get(index))/2;
    }
}

//按链表从尾到头的顺序返回一个ArrayLis：
//思路1：将链表头插就可以，利用list.add(0,cur.val)；即可
//思路2：因为是逆序，也就是回想到用栈，先进的后出即可
import java.util.ArrayList;
public class Solution {
    //思路：从尾到头，也就是相当于顺序表中的尾插法
    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {
        ArrayList<Integer> list=new ArrayList<Integer>();
        ListNode cur=listNode;
        while(cur!=null){
            list.add(0,cur.val);//每次都在0号位置进行插入
            cur=cur.next;
        }
        return list;
    }
}

//字符串替换空格：
//思路1：利用java中String自带的替换方法
str.toString().replace(" ","%20");
//思路2：直接进行append，到替换的位置就将替换好的进行append即可
StringBuffer str1=new StringBuffer();
        for(int i=0;i<str.length();i++){
            char c=str.charAt(i);
            if(c==' '){
                str1.append("%20");
            }else{
                str1.append(c);
            }
        }
        return str1.toString();
}

//顺时针打印矩阵
//思路：定义四个指针进行先向右，再向下，再向左，再向上进行遍历打出即可
import java.util.ArrayList;
public class Solution {
    //按顺时针打印：先右，再下，再左，在上
    public ArrayList<Integer> printMatrix(int [][] matrix) {
        ArrayList<Integer> result = new ArrayList<>();
        if(matrix == null){
            return result;
        }
        int low = 0;
        int high = matrix.length-1;
        int left = 0;
        int right = matrix[0].length-1;
        while(low <= high && left <= right){
 
            //向右
            for(int i=left; i <= right; i++)
                result.add(matrix[low][i]);
 
            //向下
             for(int i = low+1; i <= high; i++)
                 result.add(matrix[i][right]);
 
            //向左 有可能出现特殊的情况只有一行，为了避免重复访问
            if(low < high){
                for(int i= right-1; i >= left; i--)
                result.add(matrix[high][i]);
            }
 
            //向上 有可能出现特殊的情况只有一列，为了避免重复访问
            if(left < right){
                for(int i = high-1; i >= low+1; i--)
                result.add(matrix[i][left]);
            }
 
            low++;
            high--;
            left++;
            right--;
        }
        return result;
    }
}

//判断是否是二叉搜索树的后序
//思路：因为二叉搜索树的后序遍历最后一个就是根节点，小于该节点的值就是左子树的，大于该节点的值就是右子树的，然后记录好个数，据需递归判断是否都是满足的
import java.util.Arrays;
public class Solution {
    public boolean VerifySquenceOfBST(int [] sequence) {
        int len = sequence.length;
        if(len==0) return false;
        int root = sequence[len-1];
        int i=0;
        for(;i<len-1;i++){
            if(sequence[i]>root) break;
        }
        int j=i;
        for(;j<len-1;j++){
            if(sequence[j]<root) return false;
        }
        boolean left=true,right=true;
        if(i>0) left=VerifySquenceOfBST(Arrays.copyOfRange(sequence,0,i));
        if(i<len-1)  right=VerifySquenceOfBST(Arrays.copyOfRange(sequence,i,len-1));
        return left && right;
    }
}